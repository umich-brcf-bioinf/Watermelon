
-----------
Quick Start
-----------

1. **Watermelon conda environment**

The watermelon conda environment has all of the required software to start the pipeline - i.e. to run watermelon_init and snakemake. This environment is unlikely to change frequently, and so will only need to be rebuilt at a maximum of once per release. After the environment is built, it can be activated in any time it needs to be used.
To check which conda environments already exist::

  conda info --envs

To build the watermelon conda environment (if it doesn't already exist)::

  conda env create -f /nfs/med-bfx-common/pipelines/Watermelon/Watermelon-seedless/envs/watermelon.yaml

To activate the watermelon environment::

  conda activate watermelon

To deactivate the watermelon (if it's already activated)::

  conda deactivate

2. **Watermelon utilities in your $PATH**

In order to have access to watermelon_init (which will set up an example config and prepare for the pipeline to be run), you must make sure that the watermelon/bin location is in your PATH environment variable.
To achieve this one-time, execute the following. To achieve this every time you log in, place the same command in your ~/.bash_profile::
  PATH=/nfs/med-bfx-common/pipelines/Watermelon/Watermelon-seedless/bin/:$PATH

3. **Run 'watermelon_init' to setup the analysis**
  Requires:
* sample sheet with rows as sample names and columns as experiment variables e.g. phenotype, sample date
* genome build e.g. hg19
* job suffix e.g. _20190821
* paths to sample directories with fastq files

::

  # We're in a project directory e.g.
  cd /nfs/med-bfx-activeprojects/Example_project_yeehaw
  # For this example, we'll copy the example samplesheet from the watermelon repository
  cp /nfs/med-bfx-common/pipelines/Watermelon/Watermelon-seedless/config/example_sample_description.csv .
  # Now run watermelon_init
  watermelon_init --sample_sheet example_sample_description.csv --genome_build hg19 --job_suffix "_test_$(date +%F)" \
    /nfs/med-bfx-dnaseqcore/Run_1562/lumeng/Run_1562/lumeng/ \
    /nfs/med-bfx-dnaseqcore/Run_1564/lumeng/Run_1564/lumeng/ \
    /nfs/med-bfx-dnaseqcore/Run_1567/lumeng/Run_1567/lumeng/

4. **Review 'watermelon-init' output:**
  Generates the following:
* inputs : Directory with links to the sample dirs of input fastqs
* config.yaml : example configuration file for the pipeline
* watermelon.README : file containing instructions on modifying the config and

In this example, the config generated should be compatible with the given samples. In a real use-case scenario, the config file should be treated as a template, and edited so that it matches the project plan and dataset that it applies to.

5. **Run the watermelon pipeline**

These same directions should also be found in the watermelon.README file generated by watermelon_init ::

  # Start a screen session:
  screen -S watermelon{job_suffix}
  # Activate the conda environment:
  conda activate watermelon
  # To validate the config and check the execution plan:
  snakemake --dryrun --printshellcmds --configfile {config_file} --snakefile Watermelon/rnaseq.snakefile
  # To run (on the comps):
  snakemake --use-conda --configfile {config_file} --snakefile Watermelon/rnaseq.snakefile --profile Watermelon/config/profile-comp5-6


**6. How to restart Watermelon?**

If you quit Watermelon in the middle of a run, and want to restart it, snakemake will automatically restart from the point you exited. If partially created files exist, Watermelon will prompt you to use the following flags (just append them to the regular snakemake command) to clean-up partially created directories and files and restart analysis.
::

  --unlock              Remove a lock on the working directory.
  --cleanup-metadata FILE [FILE ...], --cm  Cleanup the metadata of given files.


If you made changes to the config.yaml (e.g. Added new samples, comparisons, changes to trimming options, etc.), then snakemake will restart the workflow in a way that meets the workflowâ€™s logical requirements.

For example, if you added two new samples to the samplesheet, snakemake will run all steps for these two samples, and then re-run the entire differential expression analysis. If you just added a new comparison (for existing samples), then it will simply re-run the differential expression analysis steps.
